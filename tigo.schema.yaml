# Rime schema
# encoding: utf-8
# https://github.com/gaboolic/rime-wubi-sentence
# https://github.com/Rayalizing/rime-huma-sentence

schema:
  schema_id: tigo
  name: 虎码整句_实验241207
  version: "2024-12-06"
  author:
    - {gaboolic (裁缝)}
  description: |
    虎码整句-实验版(基于墨奇五笔整句)

__include: moqi.yaml:/switches_engine
__include: moqi.yaml:/phrase # 置顶
# __include: moqi.yaml:/reverse #反查配置
# __include: moqi.yaml:/opencc_config # 拆分 英汉互译 火星文
__include: moqi.yaml:/guide # 引导前缀配置

punctuator: # 标点
  __include: 000_rays_symbols:/punctuator

speller:
  max_code_length: 5
  auto_select: true
  auto_select_pattern: ^[a-z]+;|^[a-z]{4}$|^;\w+
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;'
  # # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  # initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  delimiter: " ;"    # 第一位<空格>是拼音之间的分隔符；第二位<;>表示可以手动输入分号来分割拼音。
  algebra:
  # 4码全码的字，全码后加;
    - derive|^(\w)(\w),(\w)(\w)$|$1$2$3$4|
    - derive|^(\w)(\w),(\w)(\w);(.+)$|$1$2$3$4|
    - derive|^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(\w)$|$5$6$7$8|
    - derive|^(\w)(\w)(\w)(\w)$|$1$2$3$4;|  # 使用derive，不加;也能出候选。
  # # 3码全码的字，全码后加;
  #   - derive|^(\w)(\w),(\w)0.+$|$1$2$3|
  #   - derive|^.+;(\w)(\w),(\w)0$|$1$2$3|
  #   - derive|^(\w)(\w)(\w)$|$1$2$3;|  # 使用derive，不加;也能出候选。
  # 2码全码的字，全码后加;
    - derive|^(\w)(\w),0.+$|$1$2|
    - derive|^.+;(\w)(\w),00$|$1$2|
    - derive|^(\w)(\w)$|$1$2;|  # 使用derive，不加;也能出候选。
  # 1码全码的字，全码后加;
    - derive|^(\w)0,0.+$|$1;|
    - derive|^.+;(\w)0,00$|$1;|
    # - derive|^(\w)0,0.+$|$1'|  
    # - derive|^.+;(\w)0,00$|$1'|
    - derive|^(\w)$|$1;|

  # 派生出所有字词的前两码
    # - derive/^(\w)(\w),(.+)$/$1$2/
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(.+)$/$5$6/
    - derive/^(\w)(\w).+$/$1$2/
  # 派生出所有字词的前三码
    - derive/^(\w)(\w),(\w)(.+)$/$1$2$3/
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(.+)$/$5$6$7/
    - derive/^(\w)(\w)(\w).+$/$1$2$3/


user_dict_set:
  dictionary: tigo.extended
  initial_quality: 0
  enable_completion: false
  enable_sentence: false
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 0
  comment_format:
    - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分
  enable_user_dict: true # 是否开启自动调频
  user_dict: user_tg.custom.dict
  db_class: tabledb

# 自定义词典加词(ac引导)
add_user_dict:
  tag: add_user_dict
  dictionary: tigo.extended
  initial_quality: -1
  user_dict: user_tg.custom.dict
# ↓ 用户词典格式，tabledb（文本） 或 userdb （二进制）。
  db_class: tabledb
  enable_charset_filter: false
  enable_completion: true
  enable_encoder: true
  enable_sentence: true
  enable_user_dict: true
  encode_commit_history: false
  preedit_format:
    
  comment_format:
    - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分
  prefix: "AC"
  tips: "〔自造词〕"

translator:
  dictionary: tigo.extended
  initial_quality: 10000
  enable_completion: false
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 0
  comment_format:
    - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分

  enable_user_dict: false # 是否开启自动调频
  preedit_format:
    

# 快捷键
key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    # - { when: has_menu, accept: apostrophe, send: 2 } # 用'进行选2
    - { when: has_menu, accept: slash, send: 2 } # 用/进行选2
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    - { when: has_menu, accept: "Control+e", toggle: chinese_english }


    # - { match: "[a-z]{1,3}", accept: Tab,  send_sequence: "/1" }
    # - { match: "[a-z]{1,3}", accept: "/",  send_sequence: "/1" }
    # - { match: "[a-z]{1,3}", accept: ".",  send_sequence: "/1" }
    # - { when: composing, match: "[a-z]{2}", accept: Tab, send: '|' }

    ## 启用光标回退至特定音节后、补充辅助码的功能。补充完辅助码后，可以再按一次tab回到整句检查
    - { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}' }
    - { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+5, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+6, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+7, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }

# 启用語言模型
#__include: moqi:/octagram/enable_for_sentence



custom_phrase:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_tiger
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1000000