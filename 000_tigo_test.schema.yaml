# Rime schema
# encoding: utf-8
# 26键虎码整句方案：Tigo

schema:
  schema_id: 000_tigo_test
  name: "Tigo-虎码整句-test"
  version: "2024-12-06"
  author:
    - {gaboolic (裁缝)}
    - {rayalizing (也是个裁缝)}
  dependencies:
    - core2022  #自定义字集工具方案
    - PY_c  # 拼音方案
    - easy_english # 英文
  description: |
    虎码
    敲 ` 键进入拼音反查

switches: # 0 默认关，1 默认开
  - name: ascii_mode
    reset: 0
    states: [ 中文, 英文 ]  #中英文状态
  - name: extended_char  #自定义字集
    reset: 1
    states: [ 全字集 , 常用字 ]
  - name: chaifen
    reset: 0 
    states: [ 拆隐, 拆显 ]
  - name: pinyin  #拼音滤镜
    reset: 0
    states: [ 拼, pīn ]
  - name: emoji_cn  #emoji滤镜
    reset: 0
    states: [ 🈚, 🈶 ]
  # - options: [ gb2312, gbk, utf8 ]
  #   states: [ gb2312, GBK, UTF-8 ]
  #   reset: 0
  - name: simplification  #简转繁滤镜
    reset: 0
    states: [ 简中, 繁中 ]
  - options: [_keyboard_default, _keyboard_defaultbk, _keyboard_defaultwk]
    reset: 0
    states: [ 有刻, 半刻, 无刻 ]
  - name: charset_comment_filter  #字符集提示
    reset: 0  
    states: [ U区关, U区开 ]
  - name: udpf_switch
    reset: 0
    states: [ U编关, U编开]
  - name: ascii_punct
    reset: 0
    states: [ 。，, ．， ]
  # - name: dz_ci  #过滤词组
  #   reset: 0
  #   states: [ 词组, 单字 ]
  - options: [_keyboard_default, _keyboard_defaultzj]
    reset: 0
    states: [ 助记关, 助记开 ]
  # - name: fanjian  #繁转简滤镜
  #   reset: 0
  #   states: [ 反繁, 反简 ]
  - name: full_shape
    reset: 0
    states: [ 半角, 全角 ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - lua_processor@*sbxlm.key_binder # 来自整句配置，绑定按键
    - key_binder
    - speller
    - punctuator
    - lua_processor@exe_processor #exe启动器
    - selector
    - navigator
    - express_editor #计算
  segmentors:  # 分段
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - affix_segmentor@verbatim ## not as the last of this list
    - affix_segmentor@easy_english #英文相关
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator #拼音反查
    - table_translator

    # 码表翻译器 用于仓颉、五笔等基于码表的输入方案 (来自整句配置)
    - table_translator@custom_phrase # 1、2码置顶

    - table_translator@easy_english #临时英文
    - history_translator@historyDM # 重复上屏 电脑
    - history_translator@historyDM2 # 重复上屏 电脑2
    - history_translator@historyDM3 # 重复上屏 电脑3
    - history_translator@historySJ # 重复上屏 手机
    - lua_translator@number_translator # 数字转大写
    - lua_translator@calculator_translator # 简易计算器
    - lua_translator@shijian2_translator # 高级时间


  filters:
    - lua_filter@core2022  #自定义字集过滤lua；放在最上面完美解决简繁滤镜出错的问题
    - lua_filter@*long_word_filter  # （来自整句配置）长词优先（顺序要求：长词优先 > Emoji）
    # - lua_filter@dz_ci  #过滤词组lua，单字模式
    # - charset_filter@utf8
    # - charset_filter@gbk
    # - charset_filter@gb2312
    - simplifier@simplification  #简繁滤镜
    # - reverse_lookup_filter@reverse_lookup #反查词典滤镜
    # - simplifier@fanjian #繁简滤镜
    - simplifier@pinyin #拼音滤镜
    - simplifier@chaifen #拆分滤镜
    - simplifier@emoji_cn #表情滤镜
    - lua_filter@charset_comment_filter #Unicode分区提示滤镜
    - lua_filter@lua_unicode_display_filter #Unicode编码显示
    - uniquifier #过滤重复

# 来自整句配置的phrase部分
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_tiger
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1000000

# 无冲突的3简
custom_phrase_super_3jian_no_conflict:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_super_3jian_no_conflict
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 无冲突的4简
custom_phrase_super_4jian_no_conflict:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_super_4jian_no_conflict
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 快符
custom_phrase_kf:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_kf
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 字根
custom_phrase_mqzg:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_mqzg
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 超强tab 1码
custom_phrase_super_1jian:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_super_1jian
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 超强tab 2码
custom_phrase_super_2jian:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_super_2jian
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后

# 超强tab 3码
custom_phrase_super_3jian:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase_super_3jian
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #本表词和系统词重码居后
# 来自整句配置的phrase部分结束。


translator:
  dictionary: 000_tigo_test.extended
  initial_quality: 10000
  enable_charset_filter: false
  enable_encoder: false
  enable_sentence: false
  encode_commit_history: false
  # max_phrase_length: 4
  enable_user_dict: false
  enable_completion: false	# 编码提示 true 开启  false 关闭
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 0
  comment_format:  #提示码自定义
    - "xform/~/ /" #去掉编码提示前的~号
    # - "xform/^/ /" #提示前面 +间距

  enable_user_dict: false # 是否开启自动调频



# 拼音反查
reverse_lookup:
  dictionary: PY_c
  prefix: "`"
  tips: "〔拼音〕"
  preedit_format:
    - "xform/([nl])v/$1ü/"
    - "xform/([nl])ue/$1üe/"
    - "xform/([jqxy])v/$1u/"
  comment_format:
    - "xform/^/ /"
  # suffix: "'"

# 来自整句配置的"guide/long_word_filter"部分
long_word_filter: 
    count: 2
    idx: 1

punctuator:
  import_preset: 000_rays_symbols

speller:
  # auto_clear: max_length 
  max_code_length: 4
  auto_select: true
  auto_select_pattern: ^[a-z]+;|^[a-z]{4}$|^;\w+
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  # # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  # initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  delimiter: " '"    # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  algebra:
    - derive/^(\w)(\w),(.+)$/$1$2/ # 纯双拼的情况 (派生出所有字词的前两码)
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(.+)$/$5$6/ # 纯双拼的情况 (派生出所有字词的前两码)

    - derive/^(\w)(\w),(\w)(.+)$/$1$2$3/ # 双拼+一位辅助码的情况 (派生出所有字词的前三码)
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(.+)$/$5$6$7/ # 双拼+一位辅助码的情况 (派生出所有字词的前三码)

    - derive|^(\w)(\w),(\w)(\w)$|$1$2$3$4;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    - derive|^(\w)(\w),(\w)(\w);(.+)$|$1$2$3$4;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    - derive|^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(\w)$|$5$6$7$8;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    
    - derive|^(\w)(\w),(\w)0.+$|$1$2$3;| # 3码全码的字，3码全码后加;
    - derive|^(\w)(\w),00.+$|$1$2;| # 2码全码的字，2码全码后加;
    - derive|^(\w)0,00.+$|$1;| # 1码全码的字，1码全码后加;

    - derive|^.+;(\w)(\w),(\w)0$|$1$2$3;| # 3码全码的字，3码全码后加;
    - derive|^.+;(\w)(\w),00$|$1$2;| # 2码全码的字，2码全码后加;
    - derive|^.+;(\w)0,00$|$1;| # 1码全码的字，1码全码后加;


key_binder:
  #  import_preset: default
  bindings:
    # - { accept: semicolon, send: 2, when: has_menu } # 分号次选
    - { when: has_menu, accept: apostrophe, send: 2 } # 引号次选
    - { when: has_menu, accept: slash, send: 3 } # 斜杠三选
    - { when: composing, accept: Tab, send: Escape } # tab清屏
    - { when: has_menu, accept: minus, send: Page_Up } # - 向后翻页
    - { when: has_menu, accept: equal, send: Page_Down } # = 向前翻页
    - { accept: "Control+o", toggle: simplification, when: composing }  # 简繁开关
    - { accept: "Control+i", toggle: emoji_cn, when: composing }  # PC emoji开关
    - { accept: "Control+j", toggle: chaifen, when: composing } # PC 拆分滤镜开关
    - { when: has_menu, accept: Right, send: Down } # 右方向键 向后移动焦点
    - { when: has_menu, accept: Left, send: Up } # 左方向键 向前移动焦点

    ## 启用光标回退至特定音节后、补充辅助码的功能。补充完辅助码后，可以再按一次tab回到整句检查
    - { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}' }
    - { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+5, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+6, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+7, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }

# 启用語言模型
#__include: moqi:/octagram/enable_for_sentence

recognizer:
  import_preset: default
  patterns:
    punct: '^/([0-9@#]0?|[A-Za-z]+)$'
    # uppercase: "" #中文状态大写锁定直接上屏
    reverse_lookup: "^`[a-z]*'?$"
    easy_english: "^'[A-Z|a-z]*`?$"
    expression: "^=.*$"

menu:
  page_size: 9 #候选数量
  alternative_select_labels: [ ㊀, ㊁, ㊂, ㊃, ㊄, ㊅, ㊆, ㊇, ㊈ ]  #自定义候选序号显示符

# 重打
# default_historys:
historySJ:
  input: 'z'
  size: 1
  initial_quality: 0

historyDM:
  input: "["
  size: 1
  initial_quality: 999


historyDM2:
  input: "'"
  size: 1
  initial_quality: -999

historyDM3:
  input: "]"
  size: 1
  initial_quality: 999

# default_filters:
# ↓简繁(+部分异体)滤镜
simplification:  #⇩四选一
  opencc_config: st_tu.json        # 简 ➡ 繁·异（秃版标准）
# opencc_config: s2tw.json    # 简 ➡ 台湾正体
# opencc_config: s2hk.json    # 简 ➡ 香港繁体
# opencc_config: s2twp.json  # 简 ➡ 台湾正体（含常用词汇如：软体→軟體、鼠标→滑鼠）
  option_name: simplification
  tips: all  #all字词|char字

# ↓繁简滤镜
# fanjian:
#   opencc_config: t2s.json   # 繁 ➡ 简（OpenCC标准）
#   option_name: fanjian

# ↓拼音滤镜
pinyin:
  opencc_config: pinyin.json
  option_name: pinyin
  show_in_comment: true #作为注解在后面显示
  comment_format:
    - 'xform/&nbsp;/ /'
    # - "xform/^/ /"
  tips: char
  tags:
    - abc
    - tiger
    - tigress
    # - reverse_lookup


# ↓emoji表情滤镜
emoji_cn:
  opencc_config: emoji.json
  option_name: emoji_cn
  tips: all

# 拆分滤镜
chaifen:
  opencc_config: hu_cf.json
  option_name: chaifen
  show_in_comment: true 
  comment_format:     
    - "xform/&nbsp;/ /"
  tags:     
    - abc
    - tiger
    - tigress
    - reverse_lookup
  tips: all #如只想给单字加滤镜，可改为 char

# 临时英文
easy_english:
  dictionary: easy_english
  tag: easy_english
  prefix: "'"
  tips: '[En]'
  enable_completion: true
  enable_sentence: false
  initial_quality: -1
  preedit_format:
    - "xlit|_| |"
  comment_format: #去掉编码提示前的~号
    - "xform/~/ /"