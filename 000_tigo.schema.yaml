# Rime schema
# encoding: utf-8
# 26键虎码整句方案：Tigo

schema:
  schema_id: 000_tigo
  name: "Tigo-虎码整句(基于官虎)"
  version: "2024-12-06"
  author:
    - {gaboolic (裁缝)}
    - {rayalizing (也是个裁缝)}
  dependencies:
    - core2022  #自定义字集工具方案
    - PY_c  # 拼音方案
    - easy_english # 英文
  description: |
    虎码
    敲 ` 键进入拼音反查

switches/import_preset: 000_default
engine/import_preset: 000_default
reverse_lookup/import_preset: 000_default  # 拼音反查
recogizer/import_preset: 000_default
menu/import_preset: 000_default
easy_english/import_preset: 000_default  # 临时英文
punctuator/import_preset: 000_rays_symbols
translator:
  dictionary: 000_tigo.extended
  import_preset: 000_default

__include: 000_default:/default_historys # 重打配置
__include: 000_default:/default_filters  # 滤镜配置

speller:
  max_code_length: 4
  auto_select: true
  auto_select_pattern: ^[a-z]+;|^[a-z]{4}$|^;\w+
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  # # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  # initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  delimiter: " '"    # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  algebra:
    - derive/^(\w)(\w),(.+)$/$1$2/ # 纯双拼的情况 (派生出所有字词的前两码)
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(.+)$/$5$6/ # 纯双拼的情况 (派生出所有字词的前两码)

    - derive/^(\w)(\w),(\w)(.+)$/$1$2$3/ # 双拼+一位辅助码的情况 (派生出所有字词的前三码)
    - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(.+)$/$5$6$7/ # 双拼+一位辅助码的情况 (派生出所有字词的前三码)

    - derive|^(\w)(\w),(\w)(\w)$|$1$2$3$4;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    - derive|^(\w)(\w),(\w)(\w);(.+)$|$1$2$3$4;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    - derive|^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(\w)$|$5$6$7$8;| # 双拼+2位辅助码的情况（四码全码）结尾加;
    
    - derive|^(\w)(\w),(\w)0.+$|$1$2$3;| # 3码全码的字，3码全码后加;
    - derive|^(\w)(\w),00.+$|$1$2;| # 2码全码的字，2码全码后加;
    - derive|^(\w)0,00.+$|$1;| # 1码全码的字，1码全码后加;

    - derive|^.+;(\w)(\w),(\w)0$|$1$2$3;| # 3码全码的字，3码全码后加;
    - derive|^.+;(\w)(\w),00$|$1$2;| # 2码全码的字，2码全码后加;
    - derive|^.+;(\w)0,00$|$1;| # 1码全码的字，1码全码后加;


key_binder:
  #  import_preset: default
  bindings:
    # - { accept: semicolon, send: 2, when: has_menu } # 分号次选
    - { when: has_menu, accept: apostrophe, send: 2 } # 引号次选
    - { when: has_menu, accept: slash, send: 3 } # 斜杠三选
    - { when: composing, accept: Tab, send: Escape } # tab清屏
    - { when: has_menu, accept: minus, send: Page_Up } # - 向后翻页
    - { when: has_menu, accept: equal, send: Page_Down } # = 向前翻页
    - { accept: "Control+o", toggle: simplification, when: composing }  # 简繁开关
    - { accept: "Control+i", toggle: emoji_cn, when: composing }  # PC emoji开关
    - { accept: "Control+j", toggle: chaifen, when: composing } # PC 拆分滤镜开关
    - { when: has_menu, accept: Right, send: Down } # 右方向键 向后移动焦点
    - { when: has_menu, accept: Left, send: Up } # 左方向键 向前移动焦点

    ## 启用光标回退至特定音节后、补充辅助码的功能。补充完辅助码后，可以再按一次tab回到整句检查
    - { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}' }
    - { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+5, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+6, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+7, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }

